void pFromAccelWiden_{b}(
    stream<ap_uint<DOSA_HLS4ML_PARALLEL_GENERAL_BITWIDTH> >    &sFromhls4ml_parallelBuffer_chanX,
    stream<Axis<DOSA_WRAPPER_OUTPUT_IF_BITWIDTH> >    &sOutBuffer_chanX
    )
{{
  //-- DIRECTIVES FOR THIS PROCESS ------------------------------------------
#pragma HLS INLINE off
#pragma HLS pipeline II=1
  //-- STATIC VARIABLES (with RESET) ------------------------------------------
  static twoStatesFSM widenFSM = RESET;
#pragma HLS reset variable=widenFSM
  static uint32_t current_frame_bit_cnt;
#pragma HLS reset variable=current_frame_bit_cnt
  static uint32_t current_line_read_pnt;
#pragma HLS reset variable=current_line_read_pnt
  static ap_uint<DOSA_WRAPPER_OUTPUT_IF_BITWIDTH> hangover_store;
#pragma HLS reset variable=hangover_store
  static ap_uint<32> hangover_store_valid_bits;
#pragma HLS reset variable=hangover_store_valid_bits
  static ap_uint<(DOSA_WRAPPER_OUTPUT_IF_BITWIDTH+7)/8> tkeep;
#pragma HLS reset variable=tkeep
  //-- LOCAL VARIABLES ------------------------------------------------------
  bool not_empty = false;
  ap_uint<DOSA_WRAPPER_OUTPUT_IF_BITWIDTH+DOSA_HLS4ML_PARALLEL_GENERAL_BITWIDTH> combined_output = 0x0;

  switch(widenFSM)
  {{
    default:
    case RESET:
      current_frame_bit_cnt = 0x0;
      current_line_read_pnt = 0x0;
      hangover_store = 0x0;
      hangover_store_valid_bits = 0x0;
      tkeep = 0x0;
      if(!sFromhls4ml_parallelBuffer_chanX.empty())
      {{
        sFromhls4ml_parallelBuffer_chanX.read();
        not_empty = true;
      }}
      if(!not_empty)
      {{
        widenFSM = FORWARD;
      }}
      break;

    case FORWARD:
      if(!sFromhls4ml_parallelBuffer_chanX.empty() && !sOutBuffer_chanX.full())
      {{
        combined_output = hangover_store;

        ap_uint<DOSA_HLS4ML_PARALLEL_GENERAL_BITWIDTH> nv = sFromhls4ml_parallelBuffer_chanX.read();
        combined_output |= ((ap_uint<DOSA_WRAPPER_OUTPUT_IF_BITWIDTH+DOSA_HLS4ML_PARALLEL_GENERAL_BITWIDTH>) nv) << (hangover_store_valid_bits);
        current_line_read_pnt++;
        tkeep <<= DOSA_HLS4ML_PARALLEL_GENERAL_BITWIDTH_TKEEP_WIDTH;
        tkeep |= DOSA_HLS4ML_PARALLEL_GENERAL_BITWIDTH_TKEEP;

        current_frame_bit_cnt += DOSA_HLS4ML_PARALLEL_GENERAL_BITWIDTH;

        if(current_line_read_pnt >= WRAPPER_OUTPUT_IF_HLS4ML_PARALLEL_WORDS_CNT_CEIL || current_frame_bit_cnt >= HLS4ML_PARALLEL_OUTPUT_FRAME_BIT_CNT)
        {{//write to stream
          current_line_read_pnt = 0x0;
          ap_uint<1> tlast = 0;
          if(current_frame_bit_cnt >= HLS4ML_PARALLEL_OUTPUT_FRAME_BIT_CNT)
          {{
            //TODO: what if there is hangover data left?
            current_frame_bit_cnt = 0x0;
            tlast = 0b1;
          }}
          Axis<DOSA_WRAPPER_OUTPUT_IF_BITWIDTH> tmp_write_0 = Axis<DOSA_WRAPPER_OUTPUT_IF_BITWIDTH>((ap_uint<DOSA_WRAPPER_OUTPUT_IF_BITWIDTH>) combined_output, tkeep, tlast);
          sOutBuffer_chanX.write(tmp_write_0);
          tkeep = 0x0;
          printf("genericWiden: write Axis tdata: %16.16llx, tkeep: %2.2x, tlast: %x;\n", (uint64_t) tmp_write_0.getTData(), (uint8_t) tmp_write_0.getTKeep(), (uint8_t) tmp_write_0.getTLast());

          hangover_store = (ap_uint<DOSA_WRAPPER_OUTPUT_IF_BITWIDTH>) (combined_output >> DOSA_WRAPPER_OUTPUT_IF_BITWIDTH);
          if((hangover_store_valid_bits+DOSA_HLS4ML_PARALLEL_GENERAL_BITWIDTH) > DOSA_WRAPPER_OUTPUT_IF_BITWIDTH)
          {{
            hangover_store_valid_bits -= (DOSA_WRAPPER_OUTPUT_IF_BITWIDTH-DOSA_HLS4ML_PARALLEL_GENERAL_BITWIDTH);
          }} else {{
            hangover_store_valid_bits = 0x0;
          }}
        }} else {{
          //wait
          hangover_store = combined_output;
          hangover_store_valid_bits += DOSA_HLS4ML_PARALLEL_GENERAL_BITWIDTH;
        }}
        printf("genericWiden: combined %16.16llx, hangover_bits_valid_bits: %d, current_frame_bit_cnt: %d\n", (uint64_t) combined_output, (uint64_t) hangover_store_valid_bits, (uint32_t) current_frame_bit_cnt);
      }}
      break;
  }}

}}
